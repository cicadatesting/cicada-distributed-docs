(self.webpackChunkcicada_distributed_docs=self.webpackChunkcicada_distributed_docs||[]).push([[131],{3905:function(e,n,r){"use strict";r.d(n,{Zo:function(){return d},kt:function(){return g}});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function s(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=t.createContext({}),c=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):s(s({},n),e)),r},d=function(e){var n=c(e.components);return t.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=c(r),g=a,f=p["".concat(l,".").concat(g)]||p[g]||u[g]||o;return r?t.createElement(f,s(s({ref:n},d),{},{components:r})):t.createElement(f,s({ref:n},d))}));function g(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=p;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=r[c];return t.createElement.apply(null,s)}return t.createElement.apply(null,r)}p.displayName="MDXCreateElement"},2248:function(e,n,r){"use strict";r.r(n),r.d(n,{frontMatter:function(){return i},metadata:function(){return l},toc:function(){return c},default:function(){return u}});var t=r(2122),a=r(9756),o=(r(7294),r(3905)),s=["components"],i={id:"decorators",title:"Decorators"},l={unversionedId:"reference/decorators",id:"reference/decorators",isDocsHomePage:!1,title:"Decorators",description:"Scenario",source:"@site/docs/reference/decorators.md",sourceDirName:"reference",slug:"/reference/decorators",permalink:"/cicada-distributed-docs/docs/reference/decorators",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/reference/decorators.md",version:"current",frontMatter:{id:"decorators",title:"Decorators"},sidebar:"tutorialSidebar",previous:{title:"Writing Stress Tests",permalink:"/cicada-distributed-docs/docs/guides/stress-test"},next:{title:"Load Models",permalink:"/cicada-distributed-docs/docs/reference/load-models"}},c=[{value:"Scenario",id:"scenario",children:[]},{value:"User Loop",id:"user-loop",children:[]},{value:"Load Model",id:"load-model",children:[]},{value:"Dependency",id:"dependency",children:[]},{value:"Result Aggregator",id:"result-aggregator",children:[]},{value:"Result Verifier",id:"result-verifier",children:[]},{value:"Output Transformer",id:"output-transformer",children:[]},{value:"Tag",id:"tag",children:[]}],d={toc:c};function u(e){var n=e.components,r=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,t.Z)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"scenario"},"Scenario"),(0,o.kt)("p",null,"To mark a function as a Cicada scenario, use the scenario decorator. Remember\nto attach it to the engine."),(0,o.kt)("h4",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from cicadad.core.decorators import scenario\nfrom cicadad.core.engine import Engine\n\nengine = Engine()\n\n@scenario(engine)\ndef hello_world():\n    assert 2 + 2 == 4\n")),(0,o.kt)("h4",{id:"api"},"API"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'def scenario(engine: Engine, name: str = None):\n    """Mark a function as a scenario\n\n    Args:\n        engine (Engine): Engine to attach scenario to\n        name (str, optional): Name to give to scenario. Defaults to function name if None.\n    """\n')),(0,o.kt)("h2",{id:"user-loop"},"User Loop"),(0,o.kt)("p",null,"Override the user loop of a scenario."),(0,o.kt)("h4",{id:"example-1"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from cicadad.core.decorators import scenario, user_loop\nfrom cicadad.core.scenario import iterations_per_second_limited\n...\n\n@scenario(engine)\n@user_loop(iterations_per_second_limited(4))\ndef hello_world():\n    assert 2 + 2 == 4\n")),(0,o.kt)("h4",{id:"api-1"},"API"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'def user_loop(user_loop_fn: UserLoopFn):\n    """Function to handle how the user function is run\n\n    Args:\n        user_loop_fn (UserLoopFn): User defined user loop function\n    """\n')),(0,o.kt)("h2",{id:"load-model"},"Load Model"),(0,o.kt)("p",null,"Override the load model function for a scenario."),(0,o.kt)("h4",{id:"example-2"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from cicadad.core.decorators import scenario, load_model\nfrom cicadad.core.scenario import n_seconds\n...\n\n\n@scenario(engine)\n@load_model(n_seconds(30, 10))\ndef hello_world():\n    assert 2 + 2 == 4\n")),(0,o.kt)("h4",{id:"api-2"},"API"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'def load_model(load_model_fn: LoadModelFn):\n    """Function to handle how scenario is run with regards to starting users and\n    administering work\n\n    Args:\n        load_model_fn (LoadModelFn): User defined load model function\n    """\n')),(0,o.kt)("h2",{id:"dependency"},"Dependency"),(0,o.kt)("p",null,"Mark a scenario as dependent on another scenario passing."),(0,o.kt)("h4",{id:"example-3"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from cicadad.core.decorators import scenario, dependency\n...\n\n\n@scenario(engine)\ndef test_a():\n    assert 2 + 2 == 4\n\n@scenario(engine)\n@dependency(test_a)\ndef test_b():\n    assert 3 + 3 == 6\n")),(0,o.kt)("h4",{id:"api-3"},"API"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'def dependency(dep: Scenario):\n    """Set a scenario as a dependency for this scenario to run\n\n    Args:\n        dep (Scenario): Scenario this function is dependent on being successful\n    """\n')),(0,o.kt)("h2",{id:"result-aggregator"},"Result Aggregator"),(0,o.kt)("p",null,"Add a function to aggregate results gathered during scenario."),(0,o.kt)("h4",{id:"example-4"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from cicadad.core.decorators import scenario, result_aggregator\n...\n\ndef agg(last_agg, latest_results):\n    if last_agg is None:\n        total = 0\n    else:\n        total = last_agg\n\n    return total + sum(r.output for r in latest_results)\n\n\n\n@scenario(engine)\n@result_aggregator(agg)\ndef hello_world():\n    assert 2 + 2 == 4\n\n    return 1\n")),(0,o.kt)("h4",{id:"api-4"},"API"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'def result_aggregator(aggregator_fn: ResultAggregatorFn):\n    """Transform previous aggregate and list of results into an aggregated\n    single result. Called by load model function\n\n    Args:\n        aggregator_fn (ResultAggregatorFn): Aggregator function\n    """\n')),(0,o.kt)("h2",{id:"result-verifier"},"Result Verifier"),(0,o.kt)("p",null,"Add a function to verify results and add error strings for results gathered\nduring scenario."),(0,o.kt)("h4",{id:"example-5"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from cicadad.core.decorators import scenario, result_verifier\n...\n\ndef verifier(latest_results):\n    return [\n        f"* {str(result.exception)}"\n        for r in latest_results\n        if r.exception is not None\n    ]\n\n@scenario(engine)\n@result_verifier(verifier)\ndef hello_world():\n    assert ..., "expected x but got y"\n')),(0,o.kt)("h4",{id:"api-5"},"API"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'def result_verifier(verifier_fn: ResultVerifierFn):\n    """Create error messages for errors found in a list of results. Called by\n    load model function\n\n    Args:\n        verifier_fn (ResultVerifierFn): Verifier function\n    """\n')),(0,o.kt)("h2",{id:"output-transformer"},"Output Transformer"),(0,o.kt)("p",null,"Transform final aggregate to be saved as scenario output after load model\ncompletes."),(0,o.kt)("h4",{id:"example-6"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from cicadad.core.decorators import scenario, result_aggregator, output_transformer\n...\n\ndef agg(last_agg, latest_results):\n    if last_agg is None:\n        total = 0\n    else:\n        total = last_agg\n\n    return total + sum(r.output for r in latest_results)\n\n\ndef transform(agg):\n    return f"Total: {agg}"\n\n\n@scenario(engine)\n@result_aggregator(agg)\n@output_transformer(transform)\ndef hello_world():\n    assert 2 + 2 == 4\n\n    return 1\n')),(0,o.kt)("h4",{id:"api-6"},"API"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'def output_transformer(transformer_fn: OutputTransformerFn):\n    """Transform the aggregated result of the scenario after load model is\n    called\n\n    Args:\n        transformer_fn (OutputTransformerFn): Transformer function\n    """\n')),(0,o.kt)("h2",{id:"tag"},"Tag"),(0,o.kt)("p",null,"Add a tag to scenario so it can be optionally excluded during test run."),(0,o.kt)("h4",{id:"example-7"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from cicadad.core.decorators import scenario, tag\n...\n\n\n@scenario(engine)\n@tag("foo")\ndef hello_world():\n    assert 2 + 2 == 4\n')),(0,o.kt)("h4",{id:"api-7"},"API"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'def tag(tag: str):\n    """Add a tag to a scenario. Tags allow for a test run to only cover certain\n    scenarios.\n\n    Args:\n        tag (str): Tag name to add to scenario\n    """\n')))}u.isMDXComponent=!0}}]);