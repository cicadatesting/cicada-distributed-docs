"use strict";(self.webpackChunkcicada_distributed_docs=self.webpackChunkcicada_distributed_docs||[]).push([[844],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=l(n),m=i,k=p["".concat(c,".").concat(m)]||p[m]||u[m]||a;return n?r.createElement(k,o(o({ref:t},d),{},{components:n})):r.createElement(k,o({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var l=2;l<a;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},6488:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=n(7462),i=(n(7294),n(3905));const a={sidebar_position:3,id:"first-test-docker",title:"Writing Your First Test (In Docker)"},o=void 0,s={unversionedId:"introduction/first-test-docker",id:"introduction/first-test-docker",title:"Writing Your First Test (In Docker)",description:"Creating a test for Docker",source:"@site/docs/introduction/first-test-docker.md",sourceDirName:"introduction",slug:"/introduction/first-test-docker",permalink:"/cicada-distributed-docs/docs/introduction/first-test-docker",draft:!1,editUrl:"https://github.com/cicadatesting/cicada-distributed-docs/edit/main/docs/introduction/first-test-docker.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,id:"first-test-docker",title:"Writing Your First Test (In Docker)"},sidebar:"tutorialSidebar",previous:{title:"Writing Your First Test",permalink:"/cicada-distributed-docs/docs/introduction/first-test"},next:{title:"Users",permalink:"/cicada-distributed-docs/docs/introduction/users"}},c={},l=[{value:"Creating a test for Docker",id:"creating-a-test-for-docker",level:2},{value:"Project Overview",id:"project-overview",level:2},{value:"Adding a test",id:"adding-a-test",level:2},{value:"Starting the cluster",id:"starting-the-cluster",level:2},{value:"Running tests",id:"running-tests",level:2},{value:"Stopping the cluster",id:"stopping-the-cluster",level:2}],d={toc:l};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"creating-a-test-for-docker"},"Creating a test for Docker"),(0,i.kt)("p",null,"In Docker mode, you'll need to create a ",(0,i.kt)("inlineCode",{parentName:"p"},"Dockerfile")," in addition to your test.\nYou can generate a working sample test and Dockerfile through the CLI:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cicada-distributed init .\n")),(0,i.kt)("p",null,"This will create a basic ",(0,i.kt)("inlineCode",{parentName:"p"},"Dockerfile")," and a ",(0,i.kt)("inlineCode",{parentName:"p"},"test.py")," file in the current\ndirectory."),(0,i.kt)("h2",{id:"project-overview"},"Project Overview"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Dockerfile")," - This is used by Cicada to add tests to an image and specify\nthe entrypoint for tests."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test.py")," - This file is boilerplate for writing tests and linking them to an\n",(0,i.kt)("inlineCode",{parentName:"li"},"Engine"),". This file is also executed as the entrypoint for tests.")),(0,i.kt)("h2",{id:"adding-a-test"},"Adding a test"),(0,i.kt)("p",null,"In ",(0,i.kt)("inlineCode",{parentName:"p"},"test.py"),", you'll find a basic test that checks that 2 + 2 is equal to 4.\nLet's change it so it does something more interesting."),(0,i.kt)("p",null,"First, update the ",(0,i.kt)("inlineCode",{parentName:"p"},"Dockerfile")," so it installs the ",(0,i.kt)("inlineCode",{parentName:"p"},"requests")," library:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Dockerfile",metastring:"{3}","{3}":!0},'FROM cicadatesting/cicada-distributed-base-image:latest\n\nRUN pip install requests\n\nCOPY . .\n\nENTRYPOINT ["python", "-u", "test.py"]\n')),(0,i.kt)("p",null,"Next, update ",(0,i.kt)("inlineCode",{parentName:"p"},"test.py")," so it makes a call to the Google homepage and checks the\nstatus code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:"{3,10-12}","{3,10-12}":!0},'from cicadad.core.decorators import scenario\nfrom cicadad.core.engine import Engine\nimport requests\n\nengine = Engine()\n\n\n@scenario(engine)\ndef my_first_test(context):\n    response = requests.get("https://www.google.com")\n\n    assert response.status_code == 200\n\n\nif __name__ == "__main__":\n    engine.start()\n')),(0,i.kt)("h2",{id:"starting-the-cluster"},"Starting the cluster"),(0,i.kt)("p",null,"Before anything runs, ensure that the backend is running in Docker:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cicada-distributed start-cluster\n")),(0,i.kt)("p",null,"This will start a ",(0,i.kt)("inlineCode",{parentName:"p"},"backend")," in a container which is used to offload some of the\nheavy lifting from Python."),(0,i.kt)("p",null,"Run a ",(0,i.kt)("inlineCode",{parentName:"p"},"docker ps")," to ensure any requisite containers are running"),(0,i.kt)("h2",{id:"running-tests"},"Running tests"),(0,i.kt)("p",null,"Finally, it's time to run our tests! In the current directory, run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cicada-distributed run --mode DOCKER\n")),(0,i.kt)("p",null,"This will package the tests into the ",(0,i.kt)("inlineCode",{parentName:"p"},"Dockerfile")," and build the image. It will\nthen start a test container to run the scenarios attached to the ",(0,i.kt)("inlineCode",{parentName:"p"},"Engine")," and\nstream back the results."),(0,i.kt)("p",null,"Viola! The test should complete successfully."),(0,i.kt)("h2",{id:"stopping-the-cluster"},"Stopping the cluster"),(0,i.kt)("p",null,"To clean up the cluster, simply run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cicada-distributed stop-cluster\n")))}u.isMDXComponent=!0}}]);