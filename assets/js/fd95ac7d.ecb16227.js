"use strict";(self.webpackChunkcicada_distributed_docs=self.webpackChunkcicada_distributed_docs||[]).push([[303],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return p}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),m=c(n),p=i,f=m["".concat(l,".").concat(p)]||m[p]||d[p]||s;return n?r.createElement(f,o(o({ref:t},u),{},{components:n})):r.createElement(f,o({ref:t},u))}));function p(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,o=new Array(s);o[0]=m;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a.mdxType="string"==typeof e?e:i,o[1]=a;for(var c=2;c<s;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5197:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return p},frontMatter:function(){return a},metadata:function(){return c},toc:function(){return d}});var r=n(7462),i=n(3366),s=(n(7294),n(3905)),o=["components"],a={id:"metrics-guide",title:"Working With Metrics",sidebar_position:5},l=void 0,c={unversionedId:"guides/metrics-guide",id:"guides/metrics-guide",title:"Working With Metrics",description:"Cicada offers built in mechanisms for collecting and displaying metrics. In this",source:"@site/docs/guides/metrics-guide.md",sourceDirName:"guides",slug:"/guides/metrics-guide",permalink:"/cicada-distributed-docs/docs/guides/metrics-guide",editUrl:"https://github.com/cicadatesting/cicada-distributed-docs/edit/main/docs/guides/metrics-guide.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{id:"metrics-guide",title:"Working With Metrics",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Running tests on Kubernetes",permalink:"/cicada-distributed-docs/docs/guides/kubernetes"},next:{title:"Decorators",permalink:"/cicada-distributed-docs/docs/reference/decorators"}},u={},d=[{value:"Basic metrics in a load test",id:"basic-metrics-in-a-load-test",level:2},{value:"Metrics Collectors",id:"metrics-collectors",level:2},{value:"Console Metrics Displays",id:"console-metrics-displays",level:2},{value:"Example",id:"example",level:2}],m={toc:d};function p(e){var t=e.components,n=(0,i.Z)(e,o);return(0,s.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Cicada offers built in mechanisms for collecting and displaying metrics. In this\nguide, we'll go over how you can generate custom metrics from a test and display\nthem in the console."),(0,s.kt)("h2",{id:"basic-metrics-in-a-load-test"},"Basic metrics in a load test"),(0,s.kt)("p",null,"For this example, create a basic load test that will spin up 30 users for 3\nminutes:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from typing import List\n\nfrom cicadad.core.engine import Engine\nfrom cicadad.core.types import Result\nfrom cicadad.core.decorators import (\n    scenario,\n    load_model,\n    user_loop,\n)\nfrom cicadad.core.scenario import n_seconds, while_alive\nimport requests\nimport uuid\n\nengine = Engine()\n\n\n@scenario(engine)\n@load_model(n_seconds(180, 30))\n@user_loop(while_alive())\ndef post_user(context):\n    requests.post(\n        # NOTE: use demo-api for docker\n        # url="http://demo-api:8080/users",\n        url="http://localhost:8080/users",\n        json={\n            "name": "jeremy",\n            "age": 23,\n            "email": f"{str(uuid.uuid4())[:8]}@gmail.com",\n        },\n    )\n\n\nif __name__ == "__main__":\n    engine.start()\n')),(0,s.kt)("p",null,"When this test runs, it will produce metrics that are built into every test\nand displayed in the console:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"                                   post_user metrics\n \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n  name                 value\n \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n  runtimes             Min: 2.041, Median: 10.01, Average: 9.62, Max: 12.166, Len: 90\n  results_per_second   Min: 2.0, Median: 2.0, Average: 2.0, Max: 2.0, Len: 13\n  success_rate         100.0\n \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n")),(0,s.kt)("h2",{id:"metrics-collectors"},"Metrics Collectors"),(0,s.kt)("p",null,"Cicada uses metrics collectors to report metric information for a scenario. A\n",(0,s.kt)("inlineCode",{parentName:"p"},"metric_collector")," is a function that takes a list of results gathered from\nusers and reports it to a backend. This backend can be the Cicada backend\n(which is passed by default), or another metrics collection service like\nCloudwatch or Prometheus. Cicada records the following metrics in the backend\nautomatically:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"runtime"),": Statistics for user loop runtimes"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"pass_or_fail"),": Records ",(0,s.kt)("inlineCode",{parentName:"li"},"1")," if the user loop is successful, ",(0,s.kt)("inlineCode",{parentName:"li"},"0")," if it fails"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"results_per_second"),": The number of results collected over the time in seconds")),(0,s.kt)("p",null,"In the case of Cicada backend statistics, the min, mean, median, average, max,\nand number of results are stored for all float values recored for that metric."),(0,s.kt)("h2",{id:"console-metrics-displays"},"Console Metrics Displays"),(0,s.kt)("p",null,"In addition to recording metrics, Cicada provides a way of displaying metrics\nin the console through ",(0,s.kt)("inlineCode",{parentName:"p"},"console_metric_displays"),". This is a dictionary\ncontaining functions that can pull metrics from a source, such as the Cicada\nbackend (which is also passed in by default), and return a formatted string to\nprint out the metrics. Cicada provides a dictionary by default which can be\noverridden. The following metrics are printed out and can be seen in the above\nexample:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"runtimes"),": Prints statistics about the ",(0,s.kt)("inlineCode",{parentName:"li"},"runtime")," metric collected in the\nbackend"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"results_per_second"),": Statistics about the ",(0,s.kt)("inlineCode",{parentName:"li"},"results_per_second")," metric"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"success_rate"),": The percentage of values in the ",(0,s.kt)("inlineCode",{parentName:"li"},"pass_or_fail")," metric above\n",(0,s.kt)("inlineCode",{parentName:"li"},"0.5"))),(0,s.kt)("p",null,"Definitions for the types of console metrics displays can be found ",(0,s.kt)("a",{parentName:"p",href:"../reference/backend-console-metrics#console-stats"},"here")),(0,s.kt)("h2",{id:"example"},"Example"),(0,s.kt)("p",null,"In ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/cicadatesting/cicada-distributed-demos/tree/main/rest-api/metrics-demo"},"this example"),",\nwe'll replace the metrics displays to print out information about the latency of\na response."),(0,s.kt)("p",null,"First, edit the function to return the value for request time elapsed. This is\nthe time between sending the request and receiving the first headers of the\nresponse:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python",metastring:"{7,16}","{7,16}":!0},'...\n\n@scenario(engine)\n@load_model(n_seconds(180, 30))\n@user_loop(while_alive())\ndef post_user(context):\n    response = requests.post(\n        url="http://localhost:8080/users",\n        json={\n            "name": "jeremy",\n            "age": 23,\n            "email": f"{str(uuid.uuid4())[:8]}@gmail.com",\n        },\n    )\n\n    return response.elapsed.total_seconds()\n')),(0,s.kt)("p",null,"Next, add a ",(0,s.kt)("inlineCode",{parentName:"p"},"metric_collector")," that will extract the value from the response\nconvert it to milliseconds, and report it to the backend:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python",metastring:"{2-6,10}","{2-6,10}":!0},'...\nfrom cicadad.core.decorators import metrics_collector\nfrom cicadad.metrics.console import console_collector\n\ndef runtime_ms(latest_results: List[Result]):\n    return [result.output * 1000 for result in latest_results]\n\n@scenario(engine)\n@load_model(n_seconds(180, 30))\n@metrics_collector(console_collector("ms", runtime_ms))\n@user_loop(while_alive())\ndef post_user(context):\n    response = requests.post(\n        url="http://localhost:8080/users",\n        json={\n            "name": "jeremy",\n            "age": 23,\n            "email": f"{str(uuid.uuid4())[:8]}@gmail.com",\n        },\n    )\n\n    return response.elapsed.total_seconds()\n')),(0,s.kt)("p",null,"Finally, change the ",(0,s.kt)("inlineCode",{parentName:"p"},"console_metric_displays")," to print out info about the\ncollected metric. This will display statistics as well as the amount of\nresponses that took over 30 ms:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python",metastring:"{2-3,11-16}","{2-3,11-16}":!0},'...\nfrom cicadad.core.decorators import console_metric_displays\nfrom cicadad.metrics.console import console_stats, console_percent\n\ndef runtime_ms(latest_results: List[Result]):\n    return [result.output * 1000 for result in latest_results]\n\n@scenario(engine)\n@load_model(n_seconds(180, 30))\n@metrics_collector(console_collector("ms", runtime_ms))\n@console_metric_displays(\n    {\n        "latency_stats": console_stats("ms"),\n        "latency_above_30ms": console_percent("ms", 30),\n    }\n)\n@user_loop(while_alive())\ndef post_user(context):\n    response = requests.post(\n        url="http://localhost:8080/users",\n        json={\n            "name": "jeremy",\n            "age": 23,\n            "email": f"{str(uuid.uuid4())[:8]}@gmail.com",\n        },\n    )\n\n    return response.elapsed.total_seconds()\n')),(0,s.kt)("p",null,"When the test finishes (",(0,s.kt)("inlineCode",{parentName:"p"},"cicada-distributed run"),"), we should see metrics similar\nto these:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"                                      post_user metrics                                       \n \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \n  name                 value                                                                  \n \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \n  latency_stats        Min: 7.977, Median: 42.434, Average: 44.472, Max: 321.358, Len: 21255  \n  latency_above_30ms   5.669                                                                  \n \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n")),(0,s.kt)("p",null,"We can see that in 3 minutes, 21255 responses were collected and 5.7% of those\ncame in above 30 ms."))}p.isMDXComponent=!0}}]);