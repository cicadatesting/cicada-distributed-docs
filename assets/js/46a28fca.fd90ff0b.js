(self.webpackChunkcicada_distributed_docs=self.webpackChunkcicada_distributed_docs||[]).push([[762],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return l},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=u(n),m=o,f=d["".concat(s,".").concat(m)]||d[m]||p[m]||a;return n?r.createElement(f,c(c({ref:t},l),{},{components:n})):r.createElement(f,c({ref:t},l))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,c=new Array(a);c[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var u=2;u<a;u++)c[u]=n[u];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3439:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return s},toc:function(){return u},default:function(){return p}});var r=n(2122),o=n(9756),a=(n(7294),n(3905)),c=["components"],i={id:"user-commands",title:"UserCommands"},s={unversionedId:"reference/user-commands",id:"reference/user-commands",isDocsHomePage:!1,title:"UserCommands",description:"UserCommands is a class provided to the user loop to interact with the scenario.",source:"@site/docs/reference/user-commands.md",sourceDirName:"reference",slug:"/reference/user-commands",permalink:"/cicada-distributed-docs/docs/reference/user-commands",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/reference/user-commands.md",version:"current",frontMatter:{id:"user-commands",title:"UserCommands"},sidebar:"tutorialSidebar",previous:{title:"ScenarioCommands",permalink:"/cicada-distributed-docs/docs/reference/scenario-commands"},next:{title:"User Loops",permalink:"/cicada-distributed-docs/docs/reference/user-loops"}},u=[{value:"Has Work",id:"has-work",children:[]},{value:"Run",id:"run",children:[]},{value:"Report Result",id:"report-result",children:[]}],l={toc:u};function p(e){var t=e.components,n=(0,o.Z)(e,c);return(0,a.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"UserCommands is a class provided to the user loop to interact with the scenario."),(0,a.kt)("h2",{id:"has-work"},"Has Work"),(0,a.kt)("p",null,"Check if the user has work to determine if it should run or not."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'user_commands.has_work(self, timeout_ms: int = 1000):\n    """Check if user has remaining invocations\n\n    Args:\n        timeout_ms (int, optional): Time to wait for work event to appear before returning. Defaults to 1000.\n\n    Returns:\n        bool: User has work\n    """\n')),(0,a.kt)("h2",{id:"run"},"Run"),(0,a.kt)("p",null,"Run the scenario function with provided arguments."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'user_commands.run(self, *args, log_traceback=True, **kwargs):\n    """Run scenario function with arguments; capture exception and logs\n\n    Args:\n        log_traceback (bool, optional): Print out traceback for exception. Defaults to True.\n\n    Returns:\n        Tuple[Any, Exception, str]: Output, exception, and logs captured\n    """\n')),(0,a.kt)("h2",{id:"report-result"},"Report Result"),(0,a.kt)("p",null,"Send the output and exception back to the scenario."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'user_commands.report_result(\n    self, output: Any, exception: Any, logs: Optional[str], time_taken: int\n):\n    """Report result for scenario invocation from user to scenario\n\n    Args:\n        output (Any): Function output\n        exception (Any): Function exception\n        logs (Optional[str]): Function logs\n        time_taken (int): Time taken in seconds to call function once\n    """\n')))}p.isMDXComponent=!0}}]);