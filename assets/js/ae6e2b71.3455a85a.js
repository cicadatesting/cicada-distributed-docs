"use strict";(self.webpackChunkcicada_distributed_docs=self.webpackChunkcicada_distributed_docs||[]).push([[214],{3905:function(t,e,n){n.d(e,{Zo:function(){return d},kt:function(){return m}});var r=n(7294);function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function s(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){i(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,r,i=function(t,e){if(null==t)return{};var n,r,i={},a=Object.keys(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}var c=r.createContext({}),u=function(t){var e=r.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):s(s({},e),t)),n},d=function(t){var e=u(t.components);return r.createElement(c.Provider,{value:e},t.children)},l={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},p=r.forwardRef((function(t,e){var n=t.components,i=t.mdxType,a=t.originalType,c=t.parentName,d=o(t,["components","mdxType","originalType","parentName"]),p=u(n),m=i,f=p["".concat(c,".").concat(m)]||p[m]||l[m]||a;return n?r.createElement(f,s(s({ref:e},d),{},{components:n})):r.createElement(f,s({ref:e},d))}));function m(t,e){var n=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var a=n.length,s=new Array(a);s[0]=p;var o={};for(var c in e)hasOwnProperty.call(e,c)&&(o[c]=e[c]);o.originalType=t,o.mdxType="string"==typeof t?t:i,s[1]=o;for(var u=2;u<a;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},7585:function(t,e,n){n.r(e),n.d(e,{assets:function(){return d},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return l}});var r=n(7462),i=n(3366),a=(n(7294),n(3905)),s=["components"],o={sidebar_position:2,id:"first-test",title:"Writing Your First Test"},c=void 0,u={unversionedId:"introduction/first-test",id:"introduction/first-test",title:"Writing Your First Test",description:"Creating a test",source:"@site/docs/introduction/first-test.md",sourceDirName:"introduction",slug:"/introduction/first-test",permalink:"/cicada-distributed-docs/docs/introduction/first-test",editUrl:"https://github.com/cicadatesting/cicada-distributed-docs/edit/main/docs/introduction/first-test.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,id:"first-test",title:"Writing Your First Test"},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/cicada-distributed-docs/docs/introduction/installation"},next:{title:"Writing Your First Test (In Docker)",permalink:"/cicada-distributed-docs/docs/introduction/first-test-docker"}},d={},l=[{value:"Creating a test",id:"creating-a-test",level:2},{value:"Running tests",id:"running-tests",level:2}],p={toc:l};function m(t){var e=t.components,n=(0,i.Z)(t,s);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"creating-a-test"},"Creating a test"),(0,a.kt)("p",null,"To create a test, create a Python file called\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cicadatesting/cicada-distributed-demos/blob/main/first-test/test.py"},(0,a.kt)("inlineCode",{parentName:"a"},"test.py")),"\n(it can be named anything though). Enter these contents:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from cicadad.core.decorators import scenario\nfrom cicadad.core.engine import Engine\nimport requests\n\nengine = Engine()\n\n\n@scenario(engine)\ndef my_first_test(context):\n    response = requests.get("https://www.google.com")\n\n    assert response.status_code == 200\n\n\nif __name__ == "__main__":\n    engine.start()\n')),(0,a.kt)("p",null,"This will create a test that visits the Google homepage and checks for a ",(0,a.kt)("inlineCode",{parentName:"p"},"200"),"\nresponse code."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'CONTAINER ID   IMAGE                                                       COMMAND                  CREATED       STATUS       PORTS                                       NAMES\nc3f361bb4f39   cicadatesting/cicada-distributed-container-service:latest   "/app/main"              4 hours ago   Up 4 hours   0.0.0.0:8284->8284/tcp, :::8284->8284/tcp   cicada-distributed-container-service\nc1e17422ecb8   cicadatesting/cicada-distributed-datastore-client:latest    "/app/main"              4 hours ago   Up 4 hours   0.0.0.0:8283->8283/tcp, :::8283->8283/tcp   cicada-distributed-datastore-client\nbcd38f7eaaf3   redis:6                                                     "docker-entrypoint.s\u2026"   4 hours ago   Up 4 hours   0.0.0.0:6379->6379/tcp, :::6379->6379/tcp   cicada-distributed-redis\n')),(0,a.kt)("h2",{id:"running-tests"},"Running tests"),(0,a.kt)("p",null,"Next, you can run your test locally via the command line. In the directory\ncontaining the test, run:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cicada-distributed run\n")),(0,a.kt)("p",null,"This will start a local backend (assuming you have downloaded it with the\n",(0,a.kt)("inlineCode",{parentName:"p"},"start-cluster")," command) and launch test processes on your machine. Once the\ntest completes, you should an output like this in your console:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"========================= Test Complete =========================\n\nPassed:\n\n* my_first_test\n\n====================== 1 passed, 0 failed =======================\n\n--------------------- my_first_test: Passed ---------------------\n\nTime Taken: 2.018773 Seconds\nSucceeded: 1 Loop(s)\nFailed: 0 Loop(s)\nMetrics:\n                      my_first_test metrics\n \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n  name                 value\n \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n  runtimes             Min: 0.118, Median: 0.118, Average:\n                       0.118, Max: 0.118, Len: 1\n  results_per_second\n  success_rate         100.0\n \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n")),(0,a.kt)("p",null,"This will show you that the test passed in 2 seconds, with the runtime of the\nuser taking approximately 118 ms."))}m.isMDXComponent=!0}}]);