(self.webpackChunkcicada_distributed_docs=self.webpackChunkcicada_distributed_docs||[]).push([[722],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return d},kt:function(){return p}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),m=l(n),p=a,f=m["".concat(c,".").concat(p)]||m[p]||u[p]||s;return n?r.createElement(f,o(o({ref:t},d),{},{components:n})):r.createElement(f,o({ref:t},d))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var l=2;l<s;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4880:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return c},toc:function(){return l},default:function(){return u}});var r=n(2122),a=n(9756),s=(n(7294),n(3905)),o=["components"],i={sidebar_position:4,title:"Scenarios"},c={unversionedId:"introduction/scenarios",id:"introduction/scenarios",isDocsHomePage:!1,title:"Scenarios",description:"In Cicada, tests are organized into Scenarios to describe how they are run.",source:"@site/docs/introduction/scenarios.md",sourceDirName:"introduction",slug:"/introduction/scenarios",permalink:"/cicada-distributed-docs/docs/introduction/scenarios",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/introduction/scenarios.md",version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"Scenarios"},sidebar:"tutorialSidebar",previous:{title:"Users",permalink:"/cicada-distributed-docs/docs/introduction/users"},next:{title:"Writing Integration Tests",permalink:"/cicada-distributed-docs/docs/guides/integration-test"}},l=[{value:"Load Model",id:"load-model",children:[]},{value:"Scenario Commands",id:"scenario-commands",children:[]}],d={toc:l};function u(e){var t=e.components,n=(0,a.Z)(e,o);return(0,s.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"In Cicada, tests are organized into ",(0,s.kt)("inlineCode",{parentName:"p"},"Scenarios")," to describe how they are run.\nA scenario's ",(0,s.kt)("inlineCode",{parentName:"p"},"Load Model")," is responsible for managing ",(0,s.kt)("inlineCode",{parentName:"p"},"Users")," and administering\n",(0,s.kt)("inlineCode",{parentName:"p"},"work")," to users if necessary. Effectively, a single test is a ",(0,s.kt)("inlineCode",{parentName:"p"},"Scenario")," with\none or more ",(0,s.kt)("inlineCode",{parentName:"p"},"Users")),(0,s.kt)("h2",{id:"load-model"},"Load Model"),(0,s.kt)("p",null,"Let's take a look at the example test:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'@scenario(engine)\ndef my_first_test(context):\n    assert 2 + 2 == 4\n\n    return "Passed!"\n')),(0,s.kt)("p",null,"By default the scenario when run will start 1 ",(0,s.kt)("inlineCode",{parentName:"p"},"user")," and have it run 1 time.\nHere is the pseudocode for how that basic load model would work:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def run_once(scenario_commands: ScenarioCommands, context: dict):\n    scenario_commands.scale_users(1)\n    scenario_commands.add_work(1)\n\n    latest_results = []\n\n    while latest_results == []:\n        latest_results = scenario_commands.get_latest_results()\n\n        time.sleep(1)\n\n    scenario_commands.aggregate_results(latest_results)\n    scenario_commands.verify_results(latest_results)\n\n    scenario_commands.scale_users(0)\n")),(0,s.kt)("p",null,"We can override that by specifying a different load model:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python",metastring:"{1,2,5}","{1,2,5}":!0},'from cicadad.core.decorators import load_model\n...\n\ndef n_iterations(iterations: int, users: int):\n    def closure(scenario_commands: ScenarioCommands, context: dict):\n        scenario_commands.scale_users(users)\n        scenario_commands.add_work(iterations)\n\n        results = []\n\n        while len(results) < iterations:\n            latest_results = scenario_commands.get_latest_results()\n\n            scenario_commands.aggregate_results(latest_results)\n            scenario_commands.verify_results(latest_results)\n\n            results.extend(latest_results)\n            time.sleep(1)\n\n        scenario_commands.scale_users(0)\n\n    return closure\n\n@scenario(engine)\n@load_model(n_iterations(100, 10))\ndef my_first_test(context):\n    assert 2 + 2 == 4\n\n    return "Passed!"\n')),(0,s.kt)("p",null,"This creates a load model to run 10 users a shared total of 100 times until\ncompletion."),(0,s.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"This type of load model is built-in at ",(0,s.kt)("inlineCode",{parentName:"p"},"cicadad.core.scenario.n_iterations"),".\nDon't write your own version of this!"))),(0,s.kt)("h2",{id:"scenario-commands"},"Scenario Commands"),(0,s.kt)("p",null,"You may have noticed the argument for ",(0,s.kt)("inlineCode",{parentName:"p"},"ScenarioCommands")," passed to the load\nmodel. This class is used to provide an interface for managing users during a\nscenario. It has the following features:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Scale Users - Change the number of running users."),(0,s.kt)("li",{parentName:"ul"},"Start Users - Increase the number of running users."),(0,s.kt)("li",{parentName:"ul"},"Stop Users - Decrease the number of running users."),(0,s.kt)("li",{parentName:"ul"},"Add Work - Increase the number of iterations for the user pool to run."),(0,s.kt)("li",{parentName:"ul"},"Get Latest Results - Retrieve the latest results posted by the user pool."),(0,s.kt)("li",{parentName:"ul"},"Aggregate Results - Save an aggregated result based on the current aggregate\nand latest results to the scenario."),(0,s.kt)("li",{parentName:"ul"},"Verify Results - Check the latest results and return error strings if errors\namong them are found.")))}u.isMDXComponent=!0}}]);