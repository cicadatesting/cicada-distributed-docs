"use strict";(self.webpackChunkcicada_distributed_docs=self.webpackChunkcicada_distributed_docs||[]).push([[937],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return p}});var r=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var u=r.createContext({}),l=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,a=e.originalType,u=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=l(n),p=s,g=m["".concat(u,".").concat(p)]||m[p]||c[p]||a;return n?r.createElement(g,i(i({ref:t},d),{},{components:n})):r.createElement(g,i({ref:t},d))}));function p(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=n.length,i=new Array(a);i[0]=m;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:s,i[1]=o;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2919:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return u},default:function(){return p},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return c}});var r=n(7462),s=n(3366),a=(n(7294),n(3905)),i=["components"],o={id:"stress-test",title:"Writing Stress Tests",sidebar_position:3},u=void 0,l={unversionedId:"guides/stress-test",id:"guides/stress-test",title:"Writing Stress Tests",description:"Cicada's ultimate goal is to answer this question: At what point does my system",source:"@site/docs/guides/stress-test.md",sourceDirName:"guides",slug:"/guides/stress-test",permalink:"/cicada-distributed-docs/docs/guides/stress-test",editUrl:"https://github.com/cicadatesting/cicada-distributed-docs/edit/main/docs/guides/stress-test.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"stress-test",title:"Writing Stress Tests",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Writing Load Tests",permalink:"/cicada-distributed-docs/docs/guides/load-test"},next:{title:"Running tests on Kubernetes",permalink:"/cicada-distributed-docs/docs/guides/kubernetes"}},d={},c=[{value:"Creating the Test",id:"creating-the-test",level:2},{value:"Adding an Aggregator",id:"adding-an-aggregator",level:3},{value:"Adding the Load Model",id:"adding-the-load-model",level:2}],m={toc:c};function p(e){var t=e.components,n=(0,s.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Cicada's ultimate goal is to answer this question: At what point does my system\nbreak. In ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cicadatesting/cicada-distributed-demos/tree/main/rest-api/stress-test"},"this tutorial"),",\nwe'll discover how to use Cicada's powerful scaling features to push the\n",(0,a.kt)("a",{parentName:"p",href:"integration-test#creating-the-app"},"demo API")," to it's limit."),(0,a.kt)("h2",{id:"creating-the-test"},"Creating the Test"),(0,a.kt)("p",null,"The key to this test is the built-in load model ",(0,a.kt)("inlineCode",{parentName:"p"},"ramp_users_to_threshold"),". This\nwill allow the scenario to continue adding users until a certain limit is\nreached. To keep this test short, the limit will be when the average response\ntime reaches 100ms."),(0,a.kt)("h3",{id:"adding-an-aggregator"},"Adding an Aggregator"),(0,a.kt)("p",null,"Before we start, we need a function to aggregate runtimes from the users. The\nthreshold function will look at the aggregate of user results to determine if\nit has reached the threshold or not."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:"{8-37}","{8-37}":!0},'...\nfrom cicadad.core.decorators import (\n    scenario,\n    result_aggregator\n)\n...\n\ndef runtime_aggregator(previous_aggregate, latest_results):\n    if previous_aggregate is None:\n        num_results = 0\n        mean_ms = 0\n    else:\n        num_results = previous_aggregate["num_results"]\n        mean_ms = previous_aggregate["mean_ms"]\n\n    runtimes = []\n\n    for result in latest_results:\n        if result.exception is None:\n            runtimes.append(result.output)\n\n    if runtimes != []:\n        latest_num_results = len(runtimes)\n        latest_mean_ms = statistics.mean(runtimes)\n\n        new_num_results = num_results + latest_num_results\n        new_mean = (\n            (mean_ms * num_results) + (latest_mean_ms * latest_num_results)\n        ) / (num_results + latest_num_results)\n    else:\n        new_num_results = num_results\n        new_mean = mean_ms\n\n    return {\n        "num_results": new_num_results,\n        "mean_ms": new_mean,\n    }\n\n@scenario(engine)\n@result_aggregator(runtime_aggregator)\ndef post_user(context):\n    start = datetime.now()\n\n    requests.post(\n        url="http://demo-api:8080/users",\n        json={\n            "name": "jeremy",\n            "age": 23,\n            "email": f"{str(uuid.uuid4())[:8]}@gmail.com",\n        },\n    )\n\n    end = datetime.now()\n\n    return ((end - start).seconds + (end - start).microseconds / 1000000) * 1000\n')),(0,a.kt)("p",null,"This aggregator will find the mean duration of the latest results and combine it\nwith the mean of all the previous results."),(0,a.kt)("h2",{id:"adding-the-load-model"},"Adding the Load Model"),(0,a.kt)("p",null,"Next, add the ",(0,a.kt)("inlineCode",{parentName:"p"},"ramp_users_to_threshold")," load model. The load model function will\nstart with ",(0,a.kt)("inlineCode",{parentName:"p"},"10")," users and add ",(0,a.kt)("inlineCode",{parentName:"p"},"5")," users every scale up period. Finally, it will\ncheck the aggregate if it has gone over ",(0,a.kt)("inlineCode",{parentName:"p"},"100 ms"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'...\nfrom cicadad.core.decorators import (\n    scenario,\n    load_model,\n    user_loop,\n    result_aggregator\n)\nfrom cicadad.core.scenario import ramp_users_to_threshold, while_alive\n...\n\n@scenario(engine)\n@load_model(\n    ramp_users_to_threshold(\n        initial_users=10,\n        threshold_fn=lambda agg: agg is not None and agg["mean_ms"] > 100,\n        next_users_fn=lambda n: n + 5,\n    )\n)\n@user_loop(while_alive())\n@result_aggregator(runtime_aggregator)\ndef post_user(context):\n    start = datetime.now()\n\n    requests.post(\n        url="http://demo-api:8080/users",\n        json={\n            "name": "jeremy",\n            "age": 23,\n            "email": f"{str(uuid.uuid4())[:8]}@gmail.com",\n        },\n    )\n\n    end = datetime.now()\n\n    return ((end - start).seconds + (end - start).microseconds / 1000000) * 1000\n')),(0,a.kt)("p",null,"Run the test ",(0,a.kt)("inlineCode",{parentName:"p"},"cicada-distributed run")," and wait for it to complete. On the\nmachine this was tested on, the API was able to handle ",(0,a.kt)("inlineCode",{parentName:"p"},"40")," users before the\naverage response rate went over 100 ms."))}p.isMDXComponent=!0}}]);