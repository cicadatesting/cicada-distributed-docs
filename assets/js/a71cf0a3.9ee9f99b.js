"use strict";(self.webpackChunkcicada_distributed_docs=self.webpackChunkcicada_distributed_docs||[]).push([[931],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=r.createContext({}),l=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,d=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=l(n),m=i,g=p["".concat(d,".").concat(m)]||p[m]||u[m]||a;return n?r.createElement(g,s(s({ref:t},c),{},{components:n})):r.createElement(g,s({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,s=new Array(a);s[0]=p;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:i,s[1]=o;for(var l=2;l<a;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},9199:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var r=n(7462),i=(n(7294),n(3905));const a={id:"load-test",title:"Writing Load Tests",sidebar_position:2},s=void 0,o={unversionedId:"guides/load-test",id:"guides/load-test",title:"Writing Load Tests",description:"Cicada is a powerful tool for running load tests. It works by spinning up",source:"@site/docs/guides/load-test.md",sourceDirName:"guides",slug:"/guides/load-test",permalink:"/cicada-distributed-docs/docs/guides/load-test",draft:!1,editUrl:"https://github.com/cicadatesting/cicada-distributed-docs/edit/main/docs/guides/load-test.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"load-test",title:"Writing Load Tests",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Writing Integration Tests",permalink:"/cicada-distributed-docs/docs/guides/integration-test"},next:{title:"Writing Stress Tests",permalink:"/cicada-distributed-docs/docs/guides/stress-test"}},d={},l=[{value:"Creating the Test",id:"creating-the-test",level:2},{value:"Viewing Metrics from the API",id:"viewing-metrics-from-the-api",level:3},{value:"Adding Stages to the Test",id:"adding-stages-to-the-test",level:2}],c={toc:l};function u(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Cicada is a powerful tool for running load tests. It works by spinning up\nmultiple ",(0,i.kt)("inlineCode",{parentName:"p"},"users")," to run tests against your services in parallel. In this guide,\nwe'll create ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cicadatesting/cicada-distributed-demos/tree/main/rest-api/load-test"},"a simple load test"),"\nto simulate scaling load against the demo API in the\n",(0,i.kt)("a",{parentName:"p",href:"integration-test#creating-the-app"},"integration testing guide"),"."),(0,i.kt)("h2",{id:"creating-the-test"},"Creating the Test"),(0,i.kt)("p",null,"To begin, create a test directory as shown in the\n",(0,i.kt)("a",{parentName:"p",href:"integration-test#creating-the-test"},"integration testing guide"),". After\ninitializing the project, update the ",(0,i.kt)("inlineCode",{parentName:"p"},"post_user")," test:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:"{7-8}","{7-8}":!0},'...\nfrom cicadad.core.decorators import scenario, load_model, user_loop\nfrom cicadad.core.scenario import n_seconds, iterations_per_second_limited\n...\n\n@scenario(engine)\n@load_model(n_seconds(180, 30))\n@user_loop(iterations_per_second_limited(4))\ndef post_user(context):\n    requests.post(\n        url="http://localhost:8080/users",\n        json={\n            "name": "jeremy",\n            "age": 23,\n            "email": f"{str(uuid.uuid4())[:8]}@gmail.com",\n        },\n    )\n')),(0,i.kt)("p",null,"This will make the ",(0,i.kt)("inlineCode",{parentName:"p"},"post_user")," test spawn 30 users to run for 3 minutes. Each\nuser will be limited to making 4 requests per second."),(0,i.kt)("p",null,"Start the test with ",(0,i.kt)("inlineCode",{parentName:"p"},"cicada-distributed run")," and ensure it completes."),(0,i.kt)("h3",{id:"viewing-metrics-from-the-api"},"Viewing Metrics from the API"),(0,i.kt)("p",null,"The demo API is bundled with Grafana and Prometheus. You can view the metrics by\nvisiting the Grafana UI at ",(0,i.kt)("inlineCode",{parentName:"p"},"http://localhost:3000/")," (default username and\npassword is ",(0,i.kt)("inlineCode",{parentName:"p"},"admin")," / ",(0,i.kt)("inlineCode",{parentName:"p"},"admin"),")."),(0,i.kt)("p",null,"Create a graph with the Prometheus datasource (",(0,i.kt)("inlineCode",{parentName:"p"},"http://prometheus:9090"),") to view\nthe requests per second to the API. Here is the view using the query\n",(0,i.kt)("inlineCode",{parentName:"p"},"rate(starlette_requests_total[30s])"),":"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Load Model With 30 Users",src:n(7965).Z,width:"1766",height:"666"})),(0,i.kt)("h2",{id:"adding-stages-to-the-test"},"Adding Stages to the Test"),(0,i.kt)("p",null,"In a more realistic scenario, load may come in different stages. Let's update\nthe scenario to include a period of scaling up and down. The test will now have\n3 stages:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Ramp up to 30 users over the course of 1 minute."),(0,i.kt)("li",{parentName:"ol"},"Hover at 30 users for 3 minutes."),(0,i.kt)("li",{parentName:"ol"},"Scale back down to 0 users over the course of 1 minute.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:"{12-18}","{12-18}":!0},'...\nfrom cicadad.core.decorators import scenario, load_model, user_loop\nfrom cicadad.core.scenario import (\n    n_seconds,\n    iterations_per_second_limited,\n    n_users_ramping,\n    load_stages\n)\n...\n\n@scenario(engine)\n@load_model(\n    load_stages(\n        n_users_ramping(60, 30, skip_scaledown=True),\n        n_seconds(180, 30, skip_scaledown=True),\n        n_users_ramping(60, 0),\n    )\n)\n@user_loop(iterations_per_second_limited(4))\ndef post_user(context):\n    requests.post(\n        url="http://localhost:8080/users",\n        json={\n            "name": "jeremy",\n            "age": 23,\n            "email": f"{str(uuid.uuid4())[:8]}@gmail.com",\n        },\n    )\n')),(0,i.kt)("p",null,"Run the test again and ensure it completes. On the machine this was tested on,\nit reached 120 requests per second over the course of 5 minutes with a much\nsmoother load curve than the previous test."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Load Model With Ramping Users",src:n(5319).Z,width:"1692",height:"426"})))}u.isMDXComponent=!0},7965:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/load-model-30-users-70fb2a1ab130a8aa11251fc46cb681ff.png"},5319:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/load-model-ramping-f803382b20e139d01cc2b71beb7aa622.png"}}]);