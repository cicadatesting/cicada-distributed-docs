"use strict";(self.webpackChunkcicada_distributed_docs=self.webpackChunkcicada_distributed_docs||[]).push([[50],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(n),m=i,g=p["".concat(s,".").concat(m)]||p[m]||u[m]||r;return n?a.createElement(g,o(o({ref:t},d),{},{components:n})):a.createElement(g,o({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},136:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),o=["components"],l={id:"kubernetes",title:"Running tests on Kubernetes",sidebar_position:4},s=void 0,c={unversionedId:"guides/kubernetes",id:"guides/kubernetes",title:"Running tests on Kubernetes",description:"Cicada's scalability comes from its ability to run tests in a clustered",source:"@site/docs/guides/kubernetes.md",sourceDirName:"guides",slug:"/guides/kubernetes",permalink:"/cicada-distributed-docs/docs/guides/kubernetes",editUrl:"https://github.com/cicadatesting/cicada-distributed-docs/edit/main/docs/guides/kubernetes.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{id:"kubernetes",title:"Running tests on Kubernetes",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Writing Stress Tests",permalink:"/cicada-distributed-docs/docs/guides/stress-test"},next:{title:"Working With Metrics",permalink:"/cicada-distributed-docs/docs/guides/metrics-guide"}},d={},u=[{value:"Creating a local cluster",id:"creating-a-local-cluster",level:2},{value:"Deploying an example service",id:"deploying-an-example-service",level:2},{value:"Running the tests",id:"running-the-tests",level:2}],p={toc:u};function m(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Cicada's scalability comes from its ability to run tests in a clustered\nenvironment like Kubernetes. In this guide, we'll convert our app to run in K8s\nand perform tests against it . We'll also use k3d to emulate a cluster locally."),(0,r.kt)("h2",{id:"creating-a-local-cluster"},"Creating a local cluster"),(0,r.kt)("p",null,"In this example, we'll use ",(0,r.kt)("a",{parentName:"p",href:"https://k3d.io/"},"k3d"),", which is a lightweight\nversion of Kubernetes designed to run locally in Docker containers. Once you\nhave ",(0,r.kt)("inlineCode",{parentName:"p"},"k3d")," installed, setup a cluster with two node ports exposed. These will be\nused to connect to Cicada services through the CLI."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'k3d cluster create -p "8283:30083@server[0]" -p "8284:30084@server[0]"\n')),(0,r.kt)("p",null,"Since this will be running on k3d, we will have to modify the chart a bit in\norder to use this locally. We can use\n",(0,r.kt)("a",{parentName:"p",href:"https://kubectl.docs.kubernetes.io/installation/kustomize/"},"Kustomize")," to\napply an overlay on top of the normal cicada-distributed installation. This may\nbe included with your version of ",(0,r.kt)("inlineCode",{parentName:"p"},"kubectl")," by default."),(0,r.kt)("p",null,"First, save the chart to a file called ",(0,r.kt)("inlineCode",{parentName:"p"},"cicada-distributed-overlay/cicada.yaml"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir cicada-distributed-overlay\ncicada-distributed --debug start-cluster --mode=KUBE > cicada-distributed-overlay/cicada.yaml\n")),(0,r.kt)("p",null,"Next, add a patch to use the k3d NodePorts instead of the default services\n(",(0,r.kt)("inlineCode",{parentName:"p"},"cicada-distributed-overlay/patch.yaml"),"):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Service\nmetadata:\n  name: cicada-distributed-datastore-client\nspec:\n  ports:\n  - port: 8283\n    protocol: TCP\n    targetPort: 8283\n    nodePort: 30083\n  type: NodePort\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: cicada-distributed-container-service\nspec:\n  ports:\n  - port: 8284\n    protocol: TCP\n    targetPort: 8284\n    nodePort: 30084\n  type: NodePort\n")),(0,r.kt)("p",null,"Finally, add a file called ",(0,r.kt)("inlineCode",{parentName:"p"},"cicada-distributed-overlay/kustomization.yaml")," to\nspecify how to apply the overlay:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\n\nresources:\n  - cicada.yaml\npatchesStrategicMerge:\n  - patch.yaml\n")),(0,r.kt)("p",null,"Run the following command to install it into the cluster:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -k cicada-distributed-overlay\n")),(0,r.kt)("h2",{id:"deploying-an-example-service"},"Deploying an example service"),(0,r.kt)("p",null,"In the ",(0,r.kt)("a",{parentName:"p",href:"integration-test#creating-the-app"},"Integration testing guide"),", we\ncreated a simple Python API that ran in Docker Compose. Now, we will get it\nrunning in our Kubernetes cluster. Because we are running in ",(0,r.kt)("inlineCode",{parentName:"p"},"k3d")," and not\nDocker Compose, we need to build Docker images manually:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker build -t cicadatesting/demo-api-app:local .\ndocker build -t cicadatesting/demo-api-flyway:local -f flyway.dockerfile .\n")),(0,r.kt)("p",null,"After building the images, import them into the ",(0,r.kt)("inlineCode",{parentName:"p"},"k3d")," cluster:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"k3d image import cicadatesting/demo-api-app:local\nk3d image import cicadatesting/demo-api-flyway:local\n")),(0,r.kt)("p",null,"Next, we can install the app into the cluster. To do this, run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f kube-app.yaml\n")),(0,r.kt)("p",null,"Finally, run ",(0,r.kt)("inlineCode",{parentName:"p"},"kubectl get pods"),". You should see the app and database alongside\nthe Cicada pods."),(0,r.kt)("h2",{id:"running-the-tests"},"Running the tests"),(0,r.kt)("p",null,"Once an example app is running, we can run Cicada tests against it. Navigate to\nthe ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/cicadatesting/cicada-distributed-demos/tree/main/rest-api/integration-tests"},"integration-tests"),"\ndirectory. Like with the example app, we need to build and import the test to\nthe cluster. To build, run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker build -t cicadatesting/cicada-distributed-demo-integration-test:local .\n")),(0,r.kt)("p",null,"Next, import the image with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"k3d image import cicadatesting/cicada-distributed-demo-integration-test:local\n")),(0,r.kt)("p",null,"Finally, start the test by running:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cicada-distributed --debug run --mode=KUBE --image=cicadatesting/cicada-distributed-demo-integration-test:local\n")),(0,r.kt)("p",null,"You should see the test spin up and execute the 4 test scenarios."))}m.isMDXComponent=!0}}]);