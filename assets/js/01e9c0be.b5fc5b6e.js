"use strict";(self.webpackChunkcicada_distributed_docs=self.webpackChunkcicada_distributed_docs||[]).push([[722],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>p});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),m=c(n),p=a,f=m["".concat(l,".").concat(p)]||m[p]||u[p]||s;return n?r.createElement(f,o(o({ref:t},d),{},{components:n})):r.createElement(f,o({ref:t},d))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var c=2;c<s;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7572:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const s={sidebar_position:4,title:"Scenarios"},o=void 0,i={unversionedId:"introduction/scenarios",id:"introduction/scenarios",title:"Scenarios",description:"In Cicada, tests are organized into Scenarios to describe how they are run.",source:"@site/docs/introduction/scenarios.md",sourceDirName:"introduction",slug:"/introduction/scenarios",permalink:"/cicada-distributed-docs/docs/introduction/scenarios",draft:!1,editUrl:"https://github.com/cicadatesting/cicada-distributed-docs/edit/main/docs/introduction/scenarios.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"Scenarios"},sidebar:"tutorialSidebar",previous:{title:"Users",permalink:"/cicada-distributed-docs/docs/introduction/users"},next:{title:"Writing Integration Tests",permalink:"/cicada-distributed-docs/docs/guides/integration-test"}},l={},c=[{value:"Load Model",id:"load-model",level:2},{value:"Scenario Commands",id:"scenario-commands",level:2}],d={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In Cicada, tests are organized into ",(0,a.kt)("inlineCode",{parentName:"p"},"Scenarios")," to describe how they are run.\nA scenario's ",(0,a.kt)("inlineCode",{parentName:"p"},"Load Model")," is responsible for managing ",(0,a.kt)("inlineCode",{parentName:"p"},"Users")," and administering\n",(0,a.kt)("inlineCode",{parentName:"p"},"work")," to users if necessary. Effectively, a single test is a ",(0,a.kt)("inlineCode",{parentName:"p"},"Scenario")," with\none or more ",(0,a.kt)("inlineCode",{parentName:"p"},"Users")),(0,a.kt)("h2",{id:"load-model"},"Load Model"),(0,a.kt)("p",null,"Let's take a look at the example test:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'@scenario(engine)\ndef my_first_test(context):\n    assert 2 + 2 == 4\n\n    return "Passed!"\n')),(0,a.kt)("p",null,"By default the scenario when run will start 1 ",(0,a.kt)("inlineCode",{parentName:"p"},"user")," and have it run 1 time.\nHere is the pseudocode for how that basic load model would work:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def run_once(scenario_commands: ScenarioCommands, context: dict):\n    scenario_commands.scale_users(1)\n    scenario_commands.add_work(1)\n\n    latest_results = []\n\n    while latest_results == []:\n        latest_results = scenario_commands.get_latest_results()\n\n        time.sleep(1)\n\n    scenario_commands.aggregate_results(latest_results)\n    scenario_commands.verify_results(latest_results)\n\n    scenario_commands.scale_users(0)\n")),(0,a.kt)("p",null,"We can override that by specifying a different load model:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:"{1,2,5}","{1,2,5}":!0},'from cicadad.core.decorators import load_model\n...\n\ndef n_iterations(iterations: int, users: int):\n    def closure(scenario_commands: ScenarioCommands, context: dict):\n        scenario_commands.scale_users(users)\n        scenario_commands.add_work(iterations)\n\n        results = []\n\n        while len(results) < iterations:\n            latest_results = scenario_commands.get_latest_results()\n\n            scenario_commands.aggregate_results(latest_results)\n            scenario_commands.verify_results(latest_results)\n\n            results.extend(latest_results)\n            time.sleep(1)\n\n        scenario_commands.scale_users(0)\n\n    return closure\n\n@scenario(engine)\n@load_model(n_iterations(100, 10))\ndef my_first_test(context):\n    assert 2 + 2 == 4\n\n    return "Passed!"\n')),(0,a.kt)("p",null,"This creates a load model to run 10 users a shared total of 100 times until\ncompletion."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"This type of load model is built-in at ",(0,a.kt)("inlineCode",{parentName:"p"},"cicadad.core.scenario.n_iterations"),".\nDon't write your own version of this!")),(0,a.kt)("h2",{id:"scenario-commands"},"Scenario Commands"),(0,a.kt)("p",null,"You may have noticed the argument for ",(0,a.kt)("inlineCode",{parentName:"p"},"ScenarioCommands")," passed to the load\nmodel. This class is used to provide an interface for managing users during a\nscenario. It has the following features:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Scale Users - Change the number of running users."),(0,a.kt)("li",{parentName:"ul"},"Start Users - Increase the number of running users."),(0,a.kt)("li",{parentName:"ul"},"Stop Users - Decrease the number of running users."),(0,a.kt)("li",{parentName:"ul"},"Add Work - Increase the number of iterations for the user pool to run."),(0,a.kt)("li",{parentName:"ul"},"Get Latest Results - Retrieve the latest results posted by the user pool."),(0,a.kt)("li",{parentName:"ul"},"Aggregate Results - Save an aggregated result based on the current aggregate\nand latest results to the scenario."),(0,a.kt)("li",{parentName:"ul"},"Verify Results - Check the latest results and return error strings if errors\namong them are found.")))}u.isMDXComponent=!0}}]);